"""Routes for Q&A endpoints."""

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from ..types.schemas import AskRequest, AskResponse, APIResponse, AskAPIResponse
from database import get_db
from ..controllers.qa_controller import QAController

router = APIRouter(tags=["QA"])


@router.post("/ask", response_model=AskAPIResponse)
async def ask_question(request: AskRequest, db: Session = Depends(get_db)):
    """
    Accepts a question, retrieves relevant entries, and returns an answer generated by the LLM.
    Uses session management to automatically handle follow-up questions and context.
    Generates a follow-up question after answering.
    Saves the question and answer to the database.
    """
    controller = QAController(db)
    try:
        result = await controller.ask_question(request)
        return APIResponse(
            status=True,
            code="00",
            message="Response retrieved successfully",
            data=result
        )
    except ValueError as e:
        return APIResponse(
            status=False,
            code="01",
            message=str(e),
            data={}  # Empty dict for errors
        )
    except RuntimeError as e:
        return APIResponse(
            status=False,
            code="01",
            message=str(e),
            data={}  # Empty dict for errors
        )
    except Exception as e:
        return APIResponse(
            status=False,
            code="01",
            message=f"Internal server error: {str(e)}",
            data={}  # Empty dict for errors
        )

